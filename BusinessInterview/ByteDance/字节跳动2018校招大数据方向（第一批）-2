时间限制：C/C++ 3秒，其他语言6秒

空间限制：C/C++ 128M，其他语言256M

给定一个数组序列, 需要求选出一个区间, 使得该区间是所有区间中经过如下计算的值最大的一个：

区间中的最小数 * 区间所有数的和最后程序输出经过计算后的最大值即可，不需要输出具体的区间。如给定序列  [6 2 1]则根据上述公式, 可得到所有可以选定各个区间的计算值:

 

[6] = 6 * 6 = 36;

[2] = 2 * 2 = 4;

[1] = 1 * 1 = 1;

[6,2] = 2 * 8 = 16;

[2,1] = 1 * 3 = 3;

[6, 2, 1] = 1 * 9 = 9;

 

从上述计算可见选定区间 [6] ，计算值为 36， 则程序输出为 36。

区间内的所有数字都在[0, 100]的范围内;




输入描述:
第一行输入数组序列长度n，第二行输入数组序列。
对于 50%的数据,  1 <= n <= 10000;
对于 100%的数据, 1 <= n <= 500000;

输出描述:
输出数组经过计算后的最大值。

输入例子1:
3
6 2 1

输出例子1:
36




#include<iostream>
#include<algorithm>
#include<vector>

using namespace std;

int main(){
    int counts;
    int nums[500001];
    cin>>counts;
    for(int i=0; i<counts; i++){
        cin>>nums[i];
    }
    int num_sum = 0;
    int curr_max = 0; 
    for(int i=0; i<counts; i++){
        int l = i-1;
        while(l>=0 && nums[l]>=nums[i]){
            l--;
        }
        int r = i+1; 
        while(r<counts && nums[r]>=nums[i]){
            r++;
        }
        int num_sum_temp = 0;
        for(int j=l+1; j<r; j++){
            num_sum_temp += nums[j];
        }
        if(curr_max < num_sum_temp*nums[i]){
            curr_max = num_sum_temp*nums[i];
        }
    }
    cout<<curr_max;
    return 0;
}










