给定两个排序后的数组 A 和 B，其中 A 的末端有足够的缓冲空间容纳 B。 编写一个方法，将 B 合并入 A 并排序。

初始化 A 和 B 的元素数量分别为 m 和 n。

示例:

输入:
A = [1,2,3,0,0,0], m = 3
B = [2,5,6],       n = 3

输出: [1,2,2,3,5,6]
说明:

A.length == n + m

class Solution {
public:
    void merge(vector<int>& A, int m, vector<int>& B, int n) {
        int length = m+n;
        if(m==0 && n==0){
            return;
        }
        if(m==0 && n!=0){
            int k=length-1;
            while(k>=0){
                A[k] = B[k];
                k--;
            }
            return;
        }
        if(m!=0 && n==0){
            return;
        }
        for(int k=length-1,i=m-1,j=n-1; k>=0; ){
            if(B[j]>=A[i]){
                A[k] = B[j];
                k--;
                j--;
                if(j<0 && i>=0){
                    while(k>=0){
                        A[k] = A[i];
                        i--;
                        k--;
                    }
                }
            }
            else{
                A[k] = A[i];
                k--;
                i--;
                if(i<0 && j>=0){
                    while(k>=0){
                        A[k] = B[j];
                        j--;
                        k--;
                    }
                }
            }
        }

    }
};



给出一个无重叠的 ，按照区间起始端点排序的区间列表。

在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。

 

示例 1：

输入：intervals = [[1,3],[6,9]], newInterval = [2,5]
输出：[[1,5],[6,9]]
示例 2：

输入：intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
输出：[[1,2],[3,10],[12,16]]
解释：这是因为新的区间 [4,8] 与 [3,5],[6,7],[8,10] 重叠。
 
class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        vector<vector<int>> res;
        vector<int> starts;
        vector<int> ends;
        int length_past = intervals.size(); 
        for(int i=0; i<length_past; i++){
            starts.push_back(intervals[i][0]);
            ends.push_back(intervals[i][1]);
        }
        starts.push_back(newInterval[0]);
        ends.push_back(newInterval[1]);
        sort(starts.begin(), starts.end());
        sort(ends.begin(), ends.end());
        for(int i=0, j=0; i<starts.size(); i++){
            if(i==(starts.size()-1) || starts[i+1]>ends[i]){
                res.push_back({starts[j], ends[i]});
                j = i+1;
            }

        }
        return res;
    }
};
