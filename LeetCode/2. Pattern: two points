双指针是这样的模式：两个指针朝着左右方向移动（双指针分为同向双指针和异向双指针），直到他们有一个或是两个都满足某种条件。双指针通常用在排好序的数组或是链表中寻找对子。比如，你需要去比较数组中每个元素和其他元素的关系时，你就需要用到双指针了。

我们需要双指针的原因是：如果你只用一个指针的话，你得来回跑才能在数组中找到你需要的答案。这一个指针来来回回的过程就很耗时和浪费空间了 — 这是考虑算法的复杂度分析的时候的重要概念。虽然brute force一个指针的解法可能会奏效，但时间复杂度一般会是O(n²)。在很多情况下，双指针能帮助我们找到空间或是时间复杂度更低的解。

识别使用双指针的招数：
一般来说，数组或是链表是排好序的，你得在里头找一些组合满足某种限制条件
这种组合可能是一对数，三个数，或是一个子数组

设计一个算法，找出数组中两数之和为指定值的所有整数对。一个数只能属于一个数对。

示例 1:

输入: nums = [5,6,5], target = 11
输出: [[5,6]]
示例 2:

输入: nums = [5,6,5,6], target = 11
输出: [[5,6],[5,6]]
提示：

nums.length <= 100000
#include<algorithm>

class Solution {
public:
    vector<vector<int>> pairSums(vector<int>& nums, int target) {
        vector<int> NumsOrder = nums;
        vector<vector<int>> NumsPair;
        sort(NumsOrder.begin(), NumsOrder.end());
        int length = nums.size();
        for(int i=0, j=length-1; i<j; ){
            if((NumsOrder[i]+NumsOrder[j])< target){
                i++;
            }
            else if((NumsOrder[i]+NumsOrder[j])> target){
                j--;
            }
            else if((NumsOrder[i]+NumsOrder[j])== target){
                vector<int> NewPair;
                NewPair.push_back(NumsOrder[i]);
                NewPair.push_back(NumsOrder[j]);
                NumsPair.push_back(NewPair);
                i++;
                j--;
            }
            
        }
        return NumsPair;

    }
};



给定一个正整数数组 nums。

找出该数组内乘积小于 k 的连续的子数组的个数。

示例 1:

输入: nums = [10,5,2,6], k = 100
输出: 8
解释: 8个乘积小于100的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。
需要注意的是 [10,5,2] 并不是乘积小于100的子数组。
说明:

0 < nums.length <= 50000
0 < nums[i] < 1000
0 <= k < 10^6
通过次数8,345提交次数22,890

class Solution {
public:

    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
        vector<int> NumsOrder = nums;
        sort(NumsOrder.begin(), NumsOrder.end());
        if(k==0 || k==1) return 0;
        int l = 0;
        int prob = 1;
        int res = 0;
        for(int r=0; r<nums.size(); r++){
            prob *= nums[r];
            while(prob >= k){
                prob /= nums[l];
                l++;
            }
            res += r-l+1;
        }
    return res;

    }
};



