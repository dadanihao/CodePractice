题目描述
把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。
输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。
例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。
NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。


class Solution {
public:
    int minNumberInRotateArray(vector<int> rotateArray) {
        if (rotateArray.size()==0){
            return 0;
        }
        int left = 0;
        int right = rotateArray.size()-1;
        while(left<right){
            if (rotateArray[left] < rotateArray[right]){
                return rotateArray[left];
            }
            int mid = (left+right)/2;
            if (rotateArray[left]<rotateArray[mid]){
                left = mid+1;
            }
            else if(rotateArray[right]>rotateArray[mid]){
                right = mid;
            }
            else{
                left++;
            }
        }
        return rotateArray[left];
    }
};



采用的二分法找到对应的数字；
主要是依靠分界点，分界点的前后的序列都是递增的；
三类情况：1.中间<左边，中间=右边；2. 中间>左边，中间=左边；3. 中间=左边，左边++；





