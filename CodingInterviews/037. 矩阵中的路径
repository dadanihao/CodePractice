题目描述
请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如矩阵中包含一条字符串"bcced"的路径，但是矩阵中不包含"abcb"路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。

class Solution {
public:
    bool hasPath(char* matrix, int rows, int cols, char* str)
    {
        bool *flag = new bool [rows*cols];
        for(int i=0; i<rows*cols; i++){
            flag[i] = false;
        }
        bool flag_return = false;
        for(int x=0; x<rows; x++){
            for(int y=0; y<cols; y++){
                if(*(str)==matrix[x*cols+y]){
                    flag_return = flag_return || match(matrix, rows, cols, str, x, y, flag);
                }
            }
        }
        return flag_return;
    }
    bool match(char* matrix, int rows, int cols, char*str, int x, int y, bool*flag)
    {
        bool flag_return = false;
        if(x<rows && x>=0 && y<cols && y>=0 && flag[x*cols+y] == false 
           && matrix[x*cols+y]==*str)
        {
            flag[x*cols+y] = true;
            if(*(str+1)==0)return true;
            flag_return = match(matrix, rows, cols, str+1, x+1, y, flag) 
                || match(matrix, rows, cols, str+1, x-1, y, flag) 
                || match(matrix, rows, cols, str+1, x, y+1, flag)
                || match(matrix, rows, cols, str+1, x, y-1, flag);
            if(flag_return == false){
                flag[x*cols+y] = false;
            }
        }
        return flag_return;
        
    }
};
